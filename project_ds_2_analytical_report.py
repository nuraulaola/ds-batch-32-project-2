# -*- coding: utf-8 -*-
"""Nur Aula - Project DS 2 - Analytical Report.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uc4WttMuLVs3MKiJRrGuVweE8HnhJeh7

# Analytical Report Netflix Movies

Netflix adalah aplikasi yang terus berkembang pesat dalam hal popularitas, program acara, dan kontennya.

Ibaratkan kita adalah seorang data scientist dari suatu media yang membahas tentang dunia perfilman. Anda diminta untuk melakukan analisis terkait dengan film-film yang tersedia di netflix dan dampak yang diberikan dari konten yang tersedia di netflix.

Di sini kita akan belajar membuat analytical report sesuai dengan objektif analisis film-film yang tersedia di netflix dan dampak yang diberikan dari konten yang tersedia di netflix. Objektif ini kita persempit ke:

- Film apakah yang paling populer, skor IMDb tertinggi, dan menguntungkan
- Film dengan genre apa yang paling banyak di netflix
- Siapakah target market netflix
- Apakah ada negara yang memiliki skor IMDb tertinggi melebihi Hollywood/Amerika
- Kapan konten netflix paling banyak dirilis
- Berapakah durasi umumnya konten film di netflix
- Seperti apakah outlier kolom finansial pada data
- Apakah ada hubungan linier antara pendapatan film dengan skor IMDb

Dataset yang digunakan:
Netflix = https://www.kaggle.com/datasets/shivamb/netflix-shows/download?datasetVersionNumber=5
IMDb: https://www.kaggle.com/datasets/ashpalsingh1525/imdb-movies-dataset/download?datasetVersionNumber=1

Kedua dataset yg sudah di-download dari url di atas di-import ke google drive masing-masing

# Mount Google Drive & Import Library
"""

# Mount google drive

from google.colab import drive
drive.mount('drive')

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib # modul visualisasi paling dasar
import matplotlib.pyplot as plt # fungsi untuk membuat visualiasi dari modul matplotlib
import seaborn as sns # modul visualisasi advance
import plotly # modul visualisasi interaktif
import plotly.express as px # fungsi plotly yang lebih sederhana dan lebih cepat
import numpy as np # modul pengolahan data numerik
import warnings # mengatur warning message

# setiap warning non error yang muncul akan dihide
warnings.filterwarnings('ignore')

"""# Load Dataset

### Netflix Dataset

Load dataset netflix yang sudah tersedia di google drive
"""

df_netflix=pd.read_csv('/content/drive/MyDrive/dataset/Project 2/netflix_titles.csv')

data_netflix = df_netflix
data_netflix.head()

"""Kita ambil khusus data film saja pada dataset, kemudian kita bersihkan dari whitespace & diubah menjadi lowercase agar lebih rapih dalam pengolahannya"""

data_netflix = data_netflix[data_netflix['type'] == 'Movie']

print(data_netflix.shape)

data_netflix['title'] = data_netflix['title'].str.lower()
data_netflix['title'] = data_netflix['title'].str.strip()
data_netflix['title']

"""### IMDb Dataset

Load dataset IMDb yang sudah tersedia di google drive
"""

df_imdb=pd.read_csv('/content/drive/MyDrive/dataset/Project 2/imdb_movies.csv')
data_imdb = df_imdb
data_imdb.head()

"""Kita lakukan hal yang sama untuk judul film pada dataset IMDb seperti pada netflix"""

data_imdb['orig_title'] = data_imdb['orig_title'].str.lower()
data_imdb['orig_title'] = data_imdb['orig_title'].str.strip()
data_imdb['orig_title']

"""# Data Preparation

### Join netflix & IMDb dataframe

Kita gabungkan dataframe netflix & IMDb untuk mendapatkan kolom "revenue", "budget", dan "score" dari IMDb untuk netflix
"""

df = data_netflix.merge(data_imdb[['date_x', 'orig_title', 'crew', 'orig_lang', 'budget_x', 'revenue', 'score', 'genre']],left_on='title',right_on='orig_title',how='inner')
df = df.drop(['orig_title'], axis=1)

"""Kita lakukan backup dengan cara assign dataframe hasil join "df" ke variabel baru "data"
"""

data = df
data

"""## Data Cleansing & Formating

Kita lakukan pengecekan jenis data, jumlah unik, jumlah missing value, dan persentase missing value dari dataframe hasil join.

Untuk itu kita buat suatu fungsi pengecekan yang dapat digunakan untuk aktivitas serupa di masa depan
"""

def df_diagnostics(data_frame):
    types = data_frame.dtypes
    distinct = data_frame.nunique()
    count_na = data_frame.isna().sum()
    percent_na = round((data_frame.isna().sum()/len(data))*100, 3)

    df_check = pd.concat([types, distinct, count_na, percent_na], axis=1)
    df_check.reset_index(level=0, inplace=True)
    df_check.rename(columns = {'index':'column', 0:'types', 1:'distinct', 2:'count_na', 3: 'percent_na'}, inplace = True)

    print('dimensi data: ', data.shape)

    return df_check

df_diagnostics(data)

"""Terdapat 2 kolom yang memiliki missing value yaitu cast & country, kita simpan dahulu untuk analisis lanjutan.

### Formatting Date

Untuk kolom date_added dan date_x kita ubah dari object menjadi datetime untuk pengolahan data tanggal lebih lanjut.

Kita tambahkan kolom tahun dan bulan penambahan konten film ke netflix
"""

data['date_added'] = pd.to_datetime(data['date_added'])
data['date_x'] = pd.to_datetime(data['date_x'])
data['year_added'] = data['date_added'].dt.year.astype(int)
data['month_added'] = data['date_added'].dt.month.astype(int)
data

"""Kita cek apakah join kita ini sudah benar antara netflix dengan IMDb, karena kita tahu bahwa banyak film dengan nama yang sama tetapi ternyata itu adalah dua film berbeda. Sehingga perlu kita cek seharusnya tanggal rilis film tidak mungkin lebih baru daripada tanggal ditambahkannya konten ke netflix.

Kita buat dahulu kolom baru untuk menghitung selisih date_added dengan date_x
"""

data['release_day_gap'] = (data['date_added'] - data['date_x']).dt.days.astype(int)
data['release_day_gap']

"""Kita cek apakah ada release_day_gap yang minus"""

print((len(data[data['release_day_gap'] < 0])/len(data))*100, len(data[data['release_day_gap'] < 0]))
data[data['release_day_gap'] < 0].head()

"""Cek bentuk data release_day_gap lebih dari 0"""

data[data['release_day_gap'] >= 0].head(20)

"""### Cast & Crew

Ternyata selain release_day_gap, ada keanehan pada cast (pemeran film pada data netflix) yang berbeda dengan crew (pemeran film pada data IMDb) meskipun nama film sama dan release_day_gap >= 0, sehingga perlu kita cek juga kesamaan cast & crew

Kolom cast & crew ini berbentuk string tetapi di dalamnya berisi kumpulan nama/string, disamping itu biasanya pemeran utama dimunculkan pada paling awal di kolom cast & crew. Menggunakan logika itu kita dapat memfilter pemeran utama pada cast & crew itu sama
"""

data = data[data['release_day_gap'] >= 0]
data = data[data['cast'].str.split(',').str[0].str.lower().str.strip() == data['crew'].str.split(',').str[0].str.lower().str.strip()]
data

"""Dari hasil pengecekan terdapat 980 rows tersisa dari kedua dataframe yang di-join, kemudia kita lakukan pengecekkan diagnostik kembali"""

df_diagnostics(data)

"""Karena hanya 18 row yang memiliki missing value, alangkah baiknya kita dari dataframe"""

data = data.dropna(axis = 0)

df_diagnostics(data)

"""### Firat Country

Dari dataframe yang kita miliki ternyata kolom country ini tidak hanya memiliki satu nama negara, sehingga kita perlu ambil negara yang muncul paling awal
"""

data['first_country'] = data['country'].apply(lambda x: x.split(",")[0])
data['first_country'].head()


data

"""### Users Demographic

dataframe yang kita miliki memiliki kolom rating yang berisi kode usia user untuk film yang disediakan. Pemetannya menggunakan sistem rating amerika, agar lebih relevan perlu kita ubah ke kelompok usia.
"""

ratings_ages = {
'TV-PG': 'Older Kids',
'TV-MA': 'Adults',
'TV-Y7-FV': 'Older Kids',
'TV-Y7': 'Older Kids',
'TV-14': 'Teens',
'R': 'Adults',
'TV-Y': 'Kids',
'NR': 'Adults',
'PG-13': 'Teens',
'TV-G': 'Kids',
'PG': 'Older Kids',
'G': 'Kids',
'UR': 'Adults',
'NC-17': 'Adults'
}


data['target_ages'] = data['rating'].replace(ratings_ages)
data['target_ages'].unique()


data

"""### Genre & Duration

Untuk genre karena memang 1 film dapat masuk ke beberapa genre sekaligus sehingga kita perlu reformat saja yang tadinya kolom tersebut berbentuk string menjadi list of string untuk memudahkan pemrosesan di masa depan.

Kita tambahkan 1 kolom duration_min untuk mengambil angka durasi film yang sebelumnya berbentuk string
"""

data['genre'] = data['listed_in'].apply(lambda x : x.replace(' ,',',').replace(', ',',').split(','))
data['duration_min'] = data['duration'].str.extract('(\d+)').astype(int)

data

"""# Save Dataframe to XLSX

Agar data hasil pengolahan kita tidak hilang, kita backup ke xlsx agar dapat digunakan kembali sewaktu-waktu
"""

data_backup = data

df_netflix[df_netflix['listed_in'].str.contains("LGBT", na = False)]

from google.colab import drive

# saving the excel
data_backup.to_excel("clean_netflix_imdb.xlsx", index=False)
!cp clean_netflix_imdb.xlsx "/content/drive/MyDrive/Dataset"

"""# EDA

Kita akan menjawab pertanyaan-pertanyaan yang telah ditentukan di awal sesi dengan exploratory data analysis, untuk kita load data yang telah disimpan tadi
"""

data = pd.read_excel('/content/drive/MyDrive/dataset/clean_netflix_imdb.xlsx')
data

# konversi kolom ke datetime
data['date_added'] = pd.to_datetime(data['date_added'])
data['date_x'] = pd.to_datetime(data['date_x'])

# tambahan kolom
data['year_added'] = data['date_added'].dt.year.astype(int)
data['month_added'] = data['date_added'].dt.month.astype(int)

data

data.info()

"""## Color Palette"""

# Membuat palet warna untuk chart-chart yang akan dibuat
sns.palplot(['#221f1f', '#b20710', '#e50914','#f5f5f1'])

plt.title("Netflix brand palette ",loc='left',fontsize=15,y=1.2)
plt.show()

"""## Film

Di sini kita akan mulai dengan melihat film apa yang paling populer, mahal, dan disukai oleh pemirsa

### Film Terpopuler

Untuk mengetahui film terpopuler maka kita dapat menggunakan pendekatan dari kolom 'revenue', karena secara logika semakin banyak pendapatan maka semakin tinggi popularitasnya
"""

data[['title', 'revenue']].sort_values(['revenue'], ascending = False).set_index('title')['revenue'][:20]

color_map = ['#f5f5f1' for _ in range(20)]
color_map[0] =  '#b20710' # color highlight

labels = data[['title', 'revenue']].sort_values(['revenue'], ascending = False).set_index('title')['revenue'][:20]

ax = labels.plot(kind='bar', figsize=(18, 6), rot = 90, color = color_map)

ax.set_title('Top 20 Movies', fontsize = 15)
ax.set_xlabel("Movie", fontsize=12)
ax.set_ylabel("Revenue (USD)", fontsize=12)

rects = ax.patches

for rect, label in zip(rects, labels):
    height = rect.get_height()
    ax.text(rect.get_x() + rect.get_width() / 2, height + 10, label,
            ha='center', va='bottom')

plt.show()

"""Menggunakan matplotlib untuk memvisualisasikan label pada tiap bar cukup rumit karena harus menambahkan sendiri loop nilai sumbu y ke masing-masing sumbu x, kita coba buat bar chart menggunakan seaborn"""

color_map = ['#f5f5f1' for _ in range(20)]
color_map[0] =  '#b20710' # color highlight

# Set your custom color palette
sns.set_palette(sns.color_palette(color_map))

labels = data[['title', 'revenue']].sort_values(['revenue'], ascending = False)[:20]

ax = sns.barplot(labels,
             y = "revenue",
             x = "title"
            )

plt.xticks(rotation = 90)

ax.figure.set_size_inches(18,4)
ax.set_title('Top 20 Movies', fontsize = 15)
ax.set_xlabel("Movie", fontsize=12)
ax.set_ylabel("Revenue (USD)", fontsize=12)

# rects = ax.patches

# for rect, label in zip(rects, labels):
#     height = rect.get_height()
#     ax.text(rect.get_x() + rect.get_width() / 2, height + 10, label,
#             ha='center', va='bottom')

plt.show()

"""dan ternyata sama rumitnya, karena seaborn pada dasarnya seaborn dibangun atas dasar modul dari matplotlib sehingga keduanya dapat jalan berdampingan dalam satu fungsi. Kita coba menggunakan plotly"""

fig = px.bar(data[['title', 'revenue']].sort_values(['revenue'], ascending = False)[:20],
             y = "revenue",
             x = "title",
             text_auto='.s',
             title = 'Top 20 Movies by Revenue',
             color = "title",
             color_discrete_sequence = ['#b20710'] + ['#f5f5f1'] * 19,
             height=700
             )

fig.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False)
fig.update_layout(xaxis_tickangle = 270, showlegend=False, title_x=0.5)

fig.show()

"""Ternyata menggunakan plotly lebih ringkas dalam penulisan code serta plot yang interaktif menjadi lebih menarik

Kita lihat film paling populer yang ada di netflix adalah infinity war, menariknya film ini ternyata tidak ekslusif hanya untuk platform streaming rivalnya yaitu disney + akan tetapi pernah muncul di netflix pula.

### Film Skor Tertinggi

Kita lihat film terbaik berdasarkan skor imdb
"""

fig = px.bar(data[['title', 'score']].sort_values(['score'], ascending = False)[:20],
             y = "score",
             x = "title",
             text_auto='.s',
             title = 'Top 20 Movies by Score',
             color = "title",
             color_discrete_sequence = ['#b20710'] + ['#f5f5f1'] * 19,
             height=700
             )

fig.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False)
fig.update_layout(xaxis_tickangle = 270, showlegend=False, title_x=0.5)

fig.show()

"""Dari skor IMDb, film terbaik adalah Schindler's list, jika kita lihat Avengers: Infinity War meskipun meraih pendapatan tertinggi atau bisa dibilang film terpopuler ternyata hanya meraih peringkat ke 13

### Film Termahal

Selanjutnya kita lihat film termahal berdasarkan budget yang dikeluarkan
"""

fig = px.bar(data[['title', 'budget_x']].sort_values(['budget_x'], ascending = False)[:20],
             y = 'budget_x',
             x = "title",
             text_auto='.s',
             title = 'Top 20 Most Expensive Movies',
             color = "title",
             color_discrete_sequence = ['#b20710'] + ['#f5f5f1'] * 19,
             height=700
             )

fig.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False)
fig.update_layout(xaxis_tickangle = 270, showlegend=False, title_x=0.5)

fig.show()

"""Film termahal adalah Avengers: Infinity War, jika dilihat dari popularitasnya maka budget yang dihasilkan ini selangkah memberikan hasil yang baik untuk film tersebut, lantas seberapa menguntungkan film ini?

### Film paling menguntungkan

Jika kita lihat budget film yang sangat besar perlu dipikirkan aspek bisnis dari hasil produksinya. Oleh karena itu kita hitung keuntungan yang dihasilkan dari film tersebut dengan cara menghitung selisih 'revenue' dengan 'budget_x'
"""

data['profit'] = data['revenue'] - data['budget_x']

fig = px.bar(data[['title', 'profit']].sort_values(['profit'], ascending = False)[:20],
             y = 'profit',
             x = "title",
             text_auto='.s',
             title = 'Top 20 Most Profitable Movies',
             color = "title",
             color_discrete_sequence = ['#b20710'] + ['#f5f5f1'] * 19,
             height=700
             )

fig.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False)
fig.update_layout(xaxis_tickangle = 270, showlegend=False, title_x=0.5)

fig.show()

"""## Target Market

Target market dapat dilihat dari genre film yang tersedia dan juga demografi yang dituju

### Genre Terbanyak

Kita ingin melihat jenis konten seperti apa yang tersedia di netflix
"""

data['genre'].value_counts()

# Menggunakan apply dan lambda untuk mengonversi string menjadi list
data['genre'] = data['genre'].apply(lambda x: eval(x) if isinstance(x, str) else x)

data['genre']

# mengeluarkan isi dalam list untuk menjadi dataframe genre
genres = pd.DataFrame([(index, value) for (index, values) in
                      data['genre'].iteritems() for value in values],
                     columns=['kolom', 'genre']).drop('kolom', axis = 1)

genres

# grouping genre baru
genre_group = genres.groupby('genre')['genre'].count().reset_index(name='counts')

genre_group

# Menggunakan apply dan lambda untuk mengonversi string menjadi list
data['genre'] = data['genre'].apply(lambda x: eval(x) if isinstance(x, str) else x)

# mengeluarkan isi dalam list untuk menjadi dataframe genre
genres = pd.DataFrame([(index, value) for (index, values) in
                      data['genre'].iteritems() for value in values],
                     columns=['kolom', 'genre']).drop('kolom', axis = 1)

# grouping genre baru
genre_group = genres.groupby('genre')['genre'].count().reset_index(name='counts')

genre_group

"""Simpan genre groupby ke xlsx file"""

# saving the excel
genre_group.to_excel("genre_group.xlsx", index=False)
!cp genre_group.xlsx "drive/My Drive/Dataset"

fig = px.pie(genre_group,
             values = genre_group.counts,
             names = genre_group.genre,
             color = genre_group.genre,
             )
fig

"""Drama adalah jenis film terbanyak yang tersedia di netflix dan disusul oleh film komedi dan film aksi petualangan.

Selain dalam bentuk pie chart kita dapat menampilkan analisis ini dalam bentuk wordcloud.
"""

from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
from collections import Counter

genres_list = list(genres['genre'])

genres_l = Counter(genres_list)

wordcloud = WordCloud(max_words=1000000,background_color="white").generate_from_frequencies(genres_l)

plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""Fungsi utama wordcloud adalah menunjukkan kemunculan suatu kata dalam bentuk tulisan, kita coba lihat bentuk wordcloud untuk nama film"""

films = list(data['title'])
film = []

for i in films:
    i=list(i.split(','))
    for j in i:
        film.append(j.replace(' ',""))

film = Counter(film)

text = list(set(film))

#assigning shape to the word cloud
wordcloud = WordCloud(max_words=1000000,background_color="white").generate(str(text))

plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""Dari wordcloud di atas uniknya film dengan kata Barbie memiliki jumlah film terbanyak di netflix.

Bagaimana dengan film di Indonesia ya?
"""

from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
from collections import Counter

film_indonesia=list(data.loc[data['first_country'] == 'Indonesia', 'title'])
film_indo=[]

for i in film_indonesia:
    i=list(i.split(','))
    for j in i:
        film_indo.append(j.replace(' ',""))

film = Counter(film_indo)

text = list(set(film_indo))

#assigning shape to the word cloud
wordcloud = WordCloud(max_words=1000000,background_color="white").generate(str(text))

plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""Ternyata hanya ada 2 film Indonesia dan masing-masing hanya menggunakan 1 kata pada judul film

### Demographic Target

Kita lihat seperti apa distribusi demografi yang dituju oleh netflix, hal ini dapat kita lihat dari movie rating system (SU, remaja, dll).
"""

fig = px.pie(pd.DataFrame(data['target_ages'].value_counts()),
             values = pd.DataFrame(data['target_ages'].value_counts()).target_ages,
             names = pd.DataFrame(data['target_ages'].value_counts()).index,
             color = pd.DataFrame(data['target_ages'].value_counts()).index,
             color_discrete_map = {"Adults": "#221f1f",
                                    "Teens": "#b20710",
                                    "Older Kids": "#e50914",
                                    "Kids": "#f5f5f1"
                                }
             )
fig

"""Netflix memiliki target penonton terbesar pada orang-orang dewasa, yang dimana sejalan dengan model bisnis netflix yang dimana tidak murah untuk mendaftar penggunaan layanan netflix

## Country Origin

### Movie Score by Country

Selanjutnya kita coba analisis sebaran score film di tiap negara.

Sebelum kita membuat visualisasinya, kita akan membuat dataframe group agar lebih mudah ke depannya untuk digunakan
"""

# country_group = data.groupby(["first_country"]).agg(
#     # total_movie = ('title', 'count'),
#     # total_revenue = ('revenue', 'sum'), avg_revenue = ('revenue', 'mean'),
#     # total_budget = ('budget_x', 'sum'), avg_budget = ('budget_x', 'mean'),
#     avg_score = ('score', 'mean'),
#     # max_score = ('score', 'max')
#     ).sort_values("total_movie", ascending = False).reset_index()

# country_group

country_group = data.groupby(["first_country"]).agg(
    avg_score = ('score', 'mean'),
    ).sort_values("avg_score", ascending = False).reset_index()

country_group

"""Kita tampilkan distribusi skor dalam bentuk heatmap pada peta"""

# Buat peta
fig = px.choropleth(country_group, locations='first_country', color='avg_score', locationmode='country names')
fig.update_layout(title='Average IMDb Score in every country')

# Tampilkan grafik
fig.show()

"""Terlihat ada beberapa negara yang memiliki skor rata-rata IMDb lebih tinggi dari Hollywood atau Amerika, akan tetapi rata-rata skor ini bergantung juga dengan jumlah film di dalamnya. Oleh karena itu kita perlu melihat distribusi jumlah film di setiap negara

### Movie Distribution by time

Kita akan coba lihat distribusi film dari waktu ke waktu dari sisi jumlah film dan skor film
"""

movie_year = data.groupby(["year_added"]).agg(
    total_movie = ('title', 'count'),
    total_revenue = ('revenue', 'sum'), avg_revenue = ('revenue', 'mean'),
    total_budget = ('budget_x', 'sum'), avg_budget = ('budget_x', 'mean'),
    avg_score = ('score', 'mean'),
    max_score = ('score', 'max')
    ).reset_index()

movie_year

fig = px.line(movie_year,
             y = movie_year.total_movie,
             x = movie_year.year_added,
             color_discrete_sequence = ['#b20710'],
             markers=True)
fig.show()

"""Dar dataset yang kita miliki ternyata kebanyakan penambahan film di mulai pada tahun 2016 ke atas, akan tetapi bisa jadi konten film lama yang ditambahkan di awal netflix streaming berdiri sudah tidak ada lagi. Kita lihat sebaran rata-rata skor di tiap tahunnya"""

fig = px.line(movie_year,
             y = movie_year.avg_score,
             x = movie_year.year_added,
             color_discrete_sequence = ['#b20710'],
             markers=True)

# fig.update_yaxes(rangemode="tozero")

fig.show()

"""Seiring bertambahnya jumlah film yang tersedia di 2018 - 2019 adanya kenaikan rata-rata skor dari film yang disajikan , akan tetapi 2019 hingga 2021 rata-rata skor dari film yang disajikan melandai. Kita coba bandingkan dengan max_score dengan menampilkan 2 chart sekaligus."""

# Chart 1
fig1 = px.line(movie_year,
                  y="avg_score",
                  x="year_added",
                  color_discrete_sequence=['#b20710'],
                  markers=True)

# Chart 2
fig2 = px.line(movie_year,
                  y="max_score",
                  x="year_added",
                  color_discrete_sequence=['#221f1f'],
                  markers=True)


# Tampilkan chart
fig1.show()
fig2.show()

"""Cara lain untuk menampilkan, dengan penggabungan kedua line chart menggunakan graph_objects dan subplots"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px

# Buat subplot dengan dua baris
fig = make_subplots(rows=1, cols=1, subplot_titles=['Avg Score', 'Max Score'])

# Tambahkan line chart pertama dengan marker ke baris pertama
fig.add_trace(go.Scatter(x=movie_year.year_added.values, y=movie_year.avg_score.values, mode='lines+markers', name='avg_score', marker=dict(color='#b20710')))

# Tambahkan line chart kedua dengan marker ke baris kedua
fig.add_trace(go.Scatter(x=movie_year.year_added.values, y=movie_year.max_score.values, mode='lines+markers', name='max_score', marker=dict(color='#221f1f')))

# Atur layout subplot
fig.update_layout(title_text='IMDb Score from time to time')

# Tampilkan chart
fig.show()

"""Dari grafik terlihat bahwa kualitas film meningkat seiring berjalannya waktu, akan tetapi sesuai dengan grafik avg_score, film terbaik di setiap tahunnya pun melandai bahkan cenderung sedikit menurun di tahun 2018 - 2021.

### Movie Revenue by country & Month

Untuk melihat sebaran film di tiap negara berdasarkan negara & waktunya, kita perlu buat groupby lagi dengan menambahkan kolom tahun dan bulan ditambahkannya konten ke netflix
"""

country_group_year = data.groupby(["first_country", 'year_added', 'month_added']).agg(
    total_movie = ('title', 'count'),
    total_revenue = ('revenue', 'sum'), avg_revenue = ('revenue', 'mean'),
    total_budget = ('budget_x', 'sum'), avg_budget = ('budget_x', 'mean'),
    avg_score = ('score', 'mean'),
    max_score = ('score', 'max')
    ).reset_index()

country_group_year

"""Selain line chart, kita juga dapat membuat area chart untuk menunjukkan distribusi data. Sekarang kita coba lihat sebaran pendapatan film di tiap bulan penambahan konten dan negara-negara asal kontennya"""

fig = px.area(pd.DataFrame(country_group_year.groupby(['first_country', 'month_added'])[['total_revenue']].sum().reset_index()),
             y = pd.DataFrame(country_group_year.groupby(['first_country', 'month_added'])[['total_revenue']].sum().reset_index())['total_revenue'],
             x = pd.DataFrame(country_group_year.groupby(['first_country', 'month_added'])[['total_revenue']].sum().reset_index())['month_added'],
             color = pd.DataFrame(country_group_year.groupby(['first_country', 'month_added'])[['total_revenue']].sum().reset_index())['first_country'],
             labels={
                     "x": "month",
                     "y": "revenue",
                     "color": "first_country"
                },
             markers=True)
fig.show()

"""Dari area chart ini kita dapat melihat bahwa film yang paling laku itu ketika dirilis ke netflix pada bulan Januari, bukan di bulan-bulan musim panas Amerika (Juli - September)

## Movie Duration

Selanjutnya kita lihat durasi film dalam menit yang paling banyak disajikan di netflix
"""

fig = px.histogram(data['duration_min'], color_discrete_sequence = ['#b20710'], text_auto=True)
fig.show()

"""Film yang paling sering disajikan oleh netflix berkisar antara 90 hingga 104 menit, namun menariknya ada film yang durasinya di atas 3 jam.

Selain dalam bentuk histogram, kita juga dapat membuat distribusi numerik menggunakan fungsi kepadatan probabilitas (PDF) yang menggambarkan frekuensi relatif
"""

import plotly.figure_factory as ff

fig = ff.create_distplot([data['duration_min'].values.flatten()],
                         group_labels = ['duration'], colors = ['#b20710'], show_hist = False)
fig.show()

"""Dari grafik di atas menggambarkan bahwa durasi film yang paling sering disajikan (90 - 104 menit) berada di 2.5% dari total jumlah data. Artinya sebaran durasi film ini masih sangat menyebar karena titik puncak yang tidak terlalu mencolok dari jumlah dataset

## Movie Financial Performance

Selanjutnya kita akan menganalisis distribusi tentang revenue, budget_x, dan profit menggunakan boxplot
"""

from plotly.subplots import make_subplots

# Chart 1
fig1 = px.box(data, y="revenue", hover_name="title", hover_data=["genre", "date_added", "budget_x", "profit"])

# Chart 2
fig2 = px.box(data, y="budget_x", hover_name="title", hover_data=["genre", "date_added", "revenue", "profit"])

# Chart 3
fig3 = px.box(data, y="profit", hover_name="title", hover_data=["genre", "date_added", "budget_x", "revenue"])

# Gabungkan dalam satu layout subplot
fig = make_subplots(rows=1, cols=3, subplot_titles=['Revenue', 'Budget', 'Profit'])

# Tambahkan chart 1 ke subplot
fig.add_trace(fig1['data'][0], row=1, col=1)

# Tambahkan chart 2 ke subplot
fig.add_trace(fig2['data'][0], row=1, col=2)

# Tambahkan chart 3 ke subplot
fig.add_trace(fig3['data'][0], row=1, col=3)

# Atur layout subplot
fig.update_layout(title_text='Combined Box Plots', showlegend=False)

# Tampilkan chart
fig.show()

"""- Batas atas outlier untuk pendapatan film-film yang tersedia di netflix adalah 727 Juta USD
- Batas atas outlier untuk budget film-film yang tersedia di netflix adalah 190 Juta USD
- Batas atas outlier untuk profit film-film yang tersedia di netflix adalah 527 Juta USD

## Analysis of Relationship

Kita akan mencoba menjawab apa yang menyebabkan suatu film mendapatkan score IMDb bagus berdasarkan fitur-fitur pada data menggunakan matriks korelasi

Kita pilih dahulu kolom-kolom numerik pada dataset yang kita punya
"""

data_numeric = data.select_dtypes(include='number')

data_numeric

"""Buat dataframe matriks korelasi berdasarkan dataframe numerik"""

corr_data = data_numeric.corr()

corr_data

corr_data = pd.DataFrame(corr_data).reset_index().rename(columns={'index': 'feature'})

corr_data

"""Simpan hasil dataframe correlation matrix ke google drive"""

from google.colab import drive

# saving the excel
corr_data.to_excel("corr_data_netflix_imdb.xlsx", index=False)
!cp corr_data_netflix_imdb.xlsx "drive/My Drive/Dataset"

"""Kita buat heatmapnya menggunakan plotly"""

fig = px.imshow(corr_data, text_auto=True, aspect = 'auto')
fig.show()

"""Kita pangkas cell yang redundan dan korelasi ke kolom itu sendiri (self-correlation) sehingga tidak terlalu banyak informasi pada tabel"""

corr_data_viz = corr_data.mask(np.triu(np.ones_like(corr_data, dtype=bool))).dropna(how='all').dropna('columns', how='all')

fig = px.imshow(corr_data_viz, text_auto=True, aspect = 'auto')

fig.show()

"""- Release Year dan Release Day Gap:
Terdapat korelasi negatif yang sangat kuat antara "Release Year" dan "Release Day Gap" (sebaliknya). Ini berarti semakin baru rilisnya film, semakin kecil jarak hari antara tanggal rilis dan tanggal penambahan ke Netflix.

- Budget dan Revenue:
Terdapat korelasi positif yang kuat antara "Budget" dan "Revenue". Ini menunjukkan bahwa film dengan anggaran yang lebih besar cenderung menghasilkan pendapatan yang lebih tinggi.

- Score dan Duration:
Ada korelasi positif yang kuat antara "Score" (peringkat) dan "Duration" (durasi film). Hal ini mungkin menunjukkan bahwa film dengan peringkat yang lebih tinggi cenderung memiliki durasi yang lebih panjang.

- Profit dan Revenue:
Ada korelasi positif yang sangat kuat antara "Profit" dan "Revenue". Ini bermakna bahwa film dengan pendapatan yang lebih tinggi cenderung memiliki keuntungan yang lebih besar.

- Release Year dan Duration:
Terdapat korelasi negatif yang cukup kuat antara "Release Year" dan "Duration". Ini bisa menunjukkan bahwa film yang lebih baru cenderung memiliki durasi yang lebih pendek.

- Year Added dan Release Day Gap:
Terdapat korelasi positif yang cukup kuat antara "Year Added" dan "Release Day Gap". Ini bisa menunjukkan bahwa semakin baru film ditambahkan ke Netflix, semakin kecil jarak hari antara tanggal rilis dan tanggal penambahan ke Netflix.

- Profit dan Budget:
Ada korelasi positif yang kuat antara "Profit" dan "Budget". Ini menunjukkan bahwa film dengan anggaran yang lebih besar cenderung memiliki keuntungan yang lebih besar.

- Score dan Profit:
Korelasi antara "Score" dan "Profit" tergolong rendah. Ini berarti tidak ada hubungan yang jelas antara peringkat film dan keuntungan yang dihasilkan.

- Score dan Revenue:
Korelasi antara "Score" dan "Revenue" tergolong rendah. Ini berarti tidak ada hubungan yang jelas antara peringkat film dan keuntungan yang dihasilkan.

# Conclusion

Berdasarkan data yang kita olah dan analisis, disimpulkan bahwa:

- Avengers: Infinity War adalah film yang paling ambisius, efektif, dan menguntukan
- Drama adalah jenis film terbanyak yang tersedia di netflix dan disusul oleh film komedi dan film aksi petualangan
- Netflix memiliki target penonton terbesar pada orang-orang dewasa, yang dimana sejalan dengan model bisnis netflix yang dimana tidak murah untuk mendaftar penggunaan layanan netflix
- Meskipun Amerika memiliki nilai skor IMDb tertinggi, akan tetapi jika di rata-rata ada beberapa negara yang memiliki skor rata-rata IMDb lebih tinggi dari Hollywood atau Amerika, akan tetapi rata-rata skor ini bergantung juga dengan jumlah film di dalamnya. Oleh karena itu kita perlu melihat distribusi jumlah film di setiap negara
- Dari area chart ini kita dapat melihat bahwa film yang paling laku itu ketika dirilis ke netflix pada bulan Januari, bukan di bulan-bulan musim panas Amerika (Juli - September)
- durasi film yang paling sering disajikan (90 - 104 menit) berada di 2.5% dari total jumlah data. Artinya sebaran durasi film ini masih sangat menyebar karena titik puncak yang tidak terlalu mencolok dari jumlah dataset
- Batas atas outlier untuk pendapatan, budget, dan proft film-film yang tersedia di netflix adalah 727 Juta USD, 190 Juta USD, dan 527 Juta USD
- Menariknya Score IMDb ini tidak memiliki hubungan linier dengan pendapatan atau keuntungan dari suatu film

# Homework

Buat analisis tambahan berdasarkan data di atas, gunakan chart sesuai dengan analisis yang dibutuhkan menggunakan Python & Google Data Studio (looker studio)

1.   Bagaimana tren target usia dari tahun ke tahun?
2.   Bagaimana tren IMDb score dari tahun ke tahun berdasarkan target usia?
3.   Siapakah top 10 sutradara yang filmnya paling banyak di netflix?
4.   Buatkan wordcloud sutradara berdasarkan budget film
5.   Apakah ada artis yang sering bekerja sama di lebih dari 1 film?
6.   Buatkan peta negara yang nilainya berdasarkan bahasa asli film?

##Bagaimana tren target usia dari tahun ke tahun?
"""

# Memproses data untuk analisis tren target usia dari tahun ke tahun
age_trend = data[['target_ages', 'year_added']].groupby(['target_ages', 'year_added']).agg(count=('year_added', 'count')).reset_index()

# Membuat visualisasi interaktif dengan Plotly Express
fig = px.line(age_trend, # Membuat plot berdasarkan data 'age_trend' yang sudah diproses sebelumnya
              x='year_added', # Menentukan sumbu x
              y='count', # Menentukan sumbu y
              color='target_ages', # Menentukan warna garis berdasarkan kelompok 'target_ages'
              title='Tren Target Usia dari Tahun ke Tahun', # Menentukan judul plot
              labels={'count': 'Jumlah', 'year_added': 'Tahun'}, # Menetapkan label untuk sumbu x dan sumbu y
              color_discrete_sequence=['#E50914', '#221F1F', '#F5F5F1', '#B20710', '#F2F2F2', '#E50914', '#B20710', '#F5F5F1', '#221F1F']) # Mengaplikasikan palet warna Netflix ke plot

# Menampilkan plot
fig.show()

"""##Wawasan dari Tren Target Usia Tahun ke Tahun
Dari visualisasi data, dapat ditarik wawasan berdasarkan pola penambahan konten pada Netflix yang berkaitan dengan target usia tertentu. Berikut beberapa wawasan yang bisa diambil:

* Peningkatan Konten untuk Semua Kelompok Usia:

> Konten untuk semua kelompok usia (*Adults*, *Kids*, *Older Kids*, *Teens*) terus meningkat seiring berjalannya waktu. Hal ini menunjukkan bahwa Netflix berupaya untuk menyediakan variasi konten yang sesuai dengan berbagai kelompok usia.

* Tingginya Pertumbuhan Konten untuk Remaja (*Teens*):

> Terlihat bahwa pertumbuhan konten paling signifikan terjadi pada kelompok target usia *Teens*. Jumlah konten untuk remaja meningkat secara konsisten dari tahun ke tahun, mencapai puncaknya pada tahun 2021. Ini bisa mengindikasikan peningkatan fokus pada pasar remaja atau tren popularitas konten remaja.

* Konten untuk Dewasa (*Adults*) Stabil dengan Tren Peningkatan:

> Konten untuk orang dewasa juga terus meningkat, tetapi dengan tingkat pertumbuhan yang lebih stabil dibandingkan dengan remaja. Jumlah konten untuk dewasa mencapai puncak pada tahun 2021. Ini bisa menunjukkan bahwa Netflix mempertahankan basis pengguna dewasa dan terus menyesuaikan penawaran kontennya.

* Tingkat Pertumbuhan Konten untuk Anak-Anak (*Kids*):

> Meskipun jumlah konten untuk anak-anak (*Kids*) tidak setinggi kelompok usia lainnya, terlihat adanya pertumbuhan yang cukup stabil. Pada tahun 2020, ada peningkatan yang signifikan dalam jumlah konten untuk anak-anak, menunjukkan perhatian yang meningkat terhadap pasar ini.

* Kelompok *Older Kids* Mengalami Pertumbuhan yang Konsisten:

> Kelompok usia *Older Kids* juga menunjukkan pertumbuhan yang konsisten dari tahun ke tahun. Peningkatan ini mungkin mencerminkan upaya untuk menyediakan konten yang lebih sesuai dengan kebutuhan dan minat kelompok usia ini.

* Pentingnya Tahun 2018 dalam Peningkatan Konten:

> Secara umum, tahun 2018 tampak menjadi titik balik signifikan dalam peningkatan konten untuk semua kelompok usia. Hal ini bisa disebabkan oleh perubahan strategi, investasi, atau perubahan tren di Netflix.

* Perlu Perhatian Khusus pada Kelompok Usia *Teens*:

> Melihat pertumbuhan yang sangat tinggi pada kelompok usia *Teens*, Netflix mungkin perlu mempertimbangkan untuk terus fokus pada konten yang menarik bagi remaja dan memahami tren dan preferensi mereka.

*Insight* ini dapat memberikan wawasan yang lebih spesifik terkait strategi konten Netflix dan membantu dalam pengambilan keputusan strategis terkait pengembangan konten, pemasaran, dan penargetan pengguna berdasarkan kelompok usia.

##Bagaimana tren IMDb score dari tahun ke tahun berdasarkan target usia?
"""

# Memproses data untuk analisis tren IMDb score dari tahun ke tahun berdasarkan target usia
imdb_trend = data[['target_ages', 'year_added', 'score']].groupby(['target_ages', 'year_added']).agg(avg_imdb=('score', 'mean')).reset_index()

# Membuat visualisasi interaktif dengan Plotly Express
fig = px.line(imdb_trend, # Membuat plot berdasarkan data 'imdb_trend' yang sudah diproses sebelumnya
              x='year_added', # Menentukan sumbu x
              y='avg_imdb', # Menentukan sumbu y
              color='target_ages', # Menentukan warna garis berdasarkan kelompok 'target_ages'
              title='Tren Rata-rata IMDb Score dari Tahun ke Tahun Berdasarkan Target Usia', # Menentukan judul plot
              labels={'avg_imdb': 'Rata-rata IMDb Score', 'year_added': 'Tahun'}, # Menentukan label untuk sumbu x dan sumbu y
              color_discrete_sequence=['#E50914', '#221F1F', '#F5F5F1', '#B20710', '#F2F2F2', '#E50914', '#B20710', '#F5F5F1', '#221F1F']) # Mengaplikasikan palet warna Netflix ke plot

# Menampilkan plot
fig.show()

"""##Wawasan dari Tren Rata-Rata IMDb *Score* Tahun ke Tahun Berdasarkan Target Usia
*Insight* dari visualisasi tersebut dapat memberikan pemahaman mengenai rata-rata *rating* IMDb untuk konten-konten pada platform berdasarkan kelompok usia dan tahun penambahan konten. Berikut adalah beberapa wawasan yang dapat diambil:

* Tren *Rating* IMDb untuk Kelompok Usia *Adults*:

> Rata-rata *rating* IMDb untuk konten dewasa (*Adults*) cenderung meningkat dari tahun 2015 hingga 2019, dengan puncak pada tahun 2019. Namun, terlihat adanya penurunan sedikit pada tahun 2020 dan 2021. Ini mungkin menunjukkan variasi dalam kualitas konten dewasa atau perubahan preferensi penonton dewasa.

* *Rating* IMDb Tinggi untuk Konten Anak-Anak (*Kids*):

> Kelompok usia *Kids* memiliki rata-rata *rating* IMDb yang relatif tinggi, dengan peningkatan yang signifikan pada tahun 2018 dan 2021. Ini bisa mencerminkan fokus pada produksi konten berkualitas tinggi yang disukai oleh anak-anak dan disetujui oleh orang tua.

* Perbedaan Tren *Rating* IMDb untuk *Older Kids*:

> Rata-rata *rating* IMDb untuk kelompok *Older Kids* cenderung stabil dari tahun 2011 hingga 2019, dengan peningkatan sedikit pada tahun 2017. Namun, terlihat penurunan pada tahun 2020 dan 2021. Ini bisa disebabkan oleh variasi dalam jenis konten atau perubahan preferensi penonton *Older Kids*.

* Tingkat Rating IMDb yang Bervariasi untuk Kelompok Usia *Teens*:

> Kelompok usia *Teens* menunjukkan variasi yang cukup besar dalam rata-rata *rating* IMDb dari tahun ke tahun. Terdapat peningkatan yang signifikan pada tahun 2015, namun terjadi penurunan pada tahun 2016. Setelah itu, terlihat adanya peningkatan lagi hingga tahun 2021. Ini bisa mencerminkan keragaman dalam konten yang ditawarkan kepada remaja.

* Konten untuk Anak-Anak (*Kids*) dan *Teens* dengan *Rating* Tinggi di 2021:

> Tahun 2021 menonjol sebagai tahun dengan rata-rata *rating* IMDb yang tinggi, terutama untuk kelompok usia *Kids* dan *Teens*. Ini bisa mengindikasikan upaya untuk meningkatkan kualitas konten khususnya pada tahun tersebut.

* Pentingnya Kualitas Konten untuk Semua Kelompok Usia:

> Keseluruhan, data menunjukkan bahwa kualitas konten (diukur dengan *rating* IMDb) merupakan faktor penting dalam berbagai kelompok usia. Netflix dapat mempertimbangkan untuk terus fokus pada produksi konten yang dapat memenuhi harapan dan preferensi penonton.
*Insight* ini dapat membantu dalam pengambilan keputusan terkait pengembangan konten yang lebih berkualitas dan sesuai dengan selera penonton berdasarkan kelompok usia.

##Siapakah top 10 sutradara yang filmnya paling banyak di netflix?
"""

# Menghitung jumlah film yang diarahkan oleh setiap sutradara
directors_count = data['director'].str.split(', ', expand=True).stack().value_counts()

# Mengambil top 10 sutradara
top_10_directors = directors_count.head(10).reset_index() # Mengambil 10 sutradara teratas berdasarkan jumlah film yang diarahkan dan mengatur ulang indeks hasil penghitungan untuk membuat DataFrame baru
top_10_directors.columns = ['Sutradara', 'Jumlah Film'] # Memberi nama kolom pada DataFrame hasil

# Membuat palet warna Netflix
netflix_palette = ['#E50914', '#221F1F', '#F5F5F1', '#B20710', '#F2F2F2', '#E50914', '#B20710', '#F5F5F1', '#221F1F']

# Membuat visualisasi interaktif dengan Plotly Express
fig = px.bar(top_10_directors, # Membuat plot berdasarkan data 'top_10_directors' yang sudah diproses sebelumnya
             x='Sutradara', # Menentukan sumbu x
             y='Jumlah Film', # Menentukan sumbu y
             title='Top 10 Sutradara di Netflix Berdasarkan Jumlah Film', # Menetapkan judul plot
             color='Jumlah Film', # Memberikan warna bar berdasarkan jumlah film, sehingga menciptakan visualisasi warna kontinu
             color_continuous_scale=netflix_palette) # Menggunakan palet warna Netflix yang telah dibuat sebelumnya
fig.update_layout(xaxis_title='Sutradara', yaxis_title='Jumlah Film') # Mengupdate layout dari visualisasi yang telah dibuat

# Menampilkan plot
fig.show()

"""##Wawasan dari Top 10 Sutradara di Netflix Berdasarkan Jumlah Film
Wawasan yang dapat diambil dari visualisasi tersebut adalah:

* Dominasi Steven Spielberg:

> Steven Spielberg mendominasi daftar dengan 9 konten, menunjukkan kontribusi yang signifikan dalam menciptakan konten untuk Netflix. Spielberg dikenal sebagai sutradara veteran dengan pengaruh besar di dunia perfilman.

* McG, John G. Avildsen, dan Quentin Tarantino:

> McG, John G. Avildsen, dan Quentin Tarantino berada di peringkat kedua dengan masing-masing 6 konten. Ini menunjukkan kontribusi yang konsisten dari sutradara-sutradara ini dalam mendukung konten di Netflix.

* Keragaman Gaya dan Genre Sutradara Terkenal:

> Daftar ini mencakup sejumlah sutradara terkenal dengan berbagai gaya dan genre. Mulai dari Martin Scorsese yang dikenal dengan film-film *crime drama* hingga Quentin Tarantino yang terkenal dengan film-film aksi dan cerita yang inovatif.

* Pengaruh Sutradara Veteran:

> Kehadiran sutradara veteran seperti Martin Campbell, Robert Luketic, David Fincher, Ron Howard, dan Clint Eastwood menunjukkan bahwa Netflix dapat bekerja sama dengan sutradara-sutradara yang memiliki pengalaman panjang dan portofolio yang luas.

* Kontinuitas dalam Produksi:

> Beberapa sutradara, seperti Steven Spielberg, John G. Avildsen, dan Quentin Tarantino, menunjukkan tingkat kontinuitas dalam produksi konten di Netflix. Ini dapat mencerminkan hubungan yang baik antara sutradara dan Netflix, atau bahwa karya-karya mereka mendapat sambutan positif dari penonton.

* Potensi Kerja Sama yang Kuat:

> Adanya sutradara-sutradara terkenal ini dalam daftar dapat mencerminkan potensi kerja sama yang kuat antara Netflix dan sutradara-sutradara tersebut. Ini dapat menciptakan keuntungan bagi Netflix dan sutradara dalam menciptakan konten yang menarik untuk penonton.

Analisis lebih lanjut mungkin diperlukan untuk mendapatkan wawasan yang lebih mendalam tentang dampak konten-konten ini di platform Netflix.

##Buatkan wordcloud sutradara berdasarkan budget film
"""

from wordcloud import WordCloud

# Membuat DataFrame baru dengan mengelompokkan data berdasarkan kolom 'director' dan menghitung total budget ('budget_x') untuk setiap sutradara
director_budget_wise = data.groupby(by='director').agg(total=('budget_x', 'sum')).sort_values(by='total', ascending=False).reset_index()

# Mengonversi hasil pengelompokan ke dalam bentuk kamus (dictionary)
words = dict(director_budget_wise.values)

# Membuat WordCloud dengan maksimum 1000000 kata, latar belakang putih, dan menghasilkan dari frekuensi kata-kata
wordcloud = WordCloud(max_words=1000000, background_color='white').generate_from_frequencies(words)

# Membuat figure dengan ukuran 10x5 inci
plt.figure(figsize=(10, 5))

# Menampilkan WordCloud dengan interpolasi bilinear
plt.imshow(wordcloud, interpolation='bilinear')

# Menghilangkan sumbu pada plot
plt.axis('off')

# Menampilkan plot
plt.show()

director_budget_wise.to_csv("director_budget_wise.csv", index = False)
!cp director_budget_wise.csv "drive/My Drive/dataset"

"""##Apakah ada artis yang sering bekerja sama di lebih dari 1 film?"""

# Pecah kolom 'director' menjadi beberapa baris
data_director = data['director'].str.split(', ', expand=True).stack().reset_index(level=1, drop=True)
data = data.drop('director', axis=1).join(data_director.rename('director'))

# Pecah kolom 'cast' menjadi beberapa baris
data_cast = data['cast'].str.split(', ', expand=True).stack().reset_index(level=1, drop=True)
data = data.drop('cast', axis=1).join(data_cast.rename('cast'))

# Filter data untuk menyertakan hanya baris dengan lebih dari satu film oleh artis dan sutradara
frequent_collaborators = data[data.duplicated(subset=['cast', 'director'], keep=False)]

# Menghitung kolaborasi unik artis-sutradara
collaboration_counts = frequent_collaborators.groupby(['cast', 'director']).size().reset_index(name='film_count')

# Sorting berdasarkan kolom 'film_count'
collaboration_counts_sorted = collaboration_counts.sort_values(by='film_count', ascending=False)

# Membuat visualisasi interaktif
fig = px.bar(collaboration_counts_sorted.head(100), # Menampilkan 100 teratas
             x='cast', # Menetapkan sumbu x
             y='film_count', # Menetapkan sumbu y
             color='director', # Setiap warna menunjukkan sutradara berbeda
             labels={'director': 'Sutradara', 'cast': 'Artis', 'film_count': 'Jumlah Film Bersama'}, # Penyesuaian label
             title='Artis dan Sutradara yang Sering Bekerja Sama', # Menetapkan judul plot
             color_continuous_scale=['#E50914', '#221F1F', '#F5F5F1', '#B20710', '#F2F2F2', '#E50914', '#B20710', '#F5F5F1', '#221F1F']) # Menentukan skala warna

# Atur legenda
fig.update_layout(legend_title_text='Sutradara', legend=dict(title_font=dict(size=12)))

# Tampilkan visualisasi interaktif
fig.show()

"""##Wawasan dari Data Artis dan Sutradara yang Sering Bekerja Sama di Lebih Dari 1 Film
Dari visualisasi kerja sama artis dan sutradara tersebut, kita dapat menarik beberapa wawasan:

* Dominasi Sutradara Wachowski:

> Lana Wachowski dan Lilly Wachowski menonjol sebagai sutradara dengan jumlah kolaborasi yang tinggi. Hugo Weaving memiliki 9 film bersama dengan Lana Wachowski dan 9 film bersama dengan Lilly Wachowski.

* Matrix Trilogy:

> Sejumlah besar kolaborasi terjadi dalam proyek-proyek khusus, seperti film-film dalam trilogy Matrix, di mana Laurence Fishburne, Keanu Reeves, Carrie-Anne Moss, dan Hugo Weaving bekerja bersama baik dengan Lana Wachowski maupun Lilly Wachowski.

* Kolaborasi Beragam:

> David Schwimmer dan Sacha Baron Cohen, bersama dengan beberapa artis lainnya, terlibat dalam proyek-proyek yang disutradarai oleh Tom McGrath, Eric Darnell, dan William Eubank, menunjukkan keragaman dalam kolaborasi mereka di berbagai genre dan gaya film.

* Jesse V. Johnson dan Scott Adkins:

> Jesse V. Johnson dan Scott Adkins memiliki kolaborasi yang signifikan (5 film), menunjukkan hubungan yang kuat antara sutradara dan aktor dalam menciptakan proyek-proyek film.

* Sutradara John G. Avildsen dan Ralph Macchio:

> John G. Avildsen dan Ralph Macchio memiliki kolaborasi dalam 4 film, menciptakan hubungan kerja yang berkelanjutan di beberapa proyek.

* Kolaborasi Antara Sutradara dan Artis yang Berbeda:

> Artis seperti Jada Pinkett Smith, Monica Bellucci, Gloria Foster, dan Martin Kove terlibat dalam proyek-proyek yang melibatkan berbagai sutradara, menunjukkan fleksibilitas mereka untuk bekerja di berbagai jenis proyek.

* Kolaborasi Sutradara Wachowski dengan Berbagai Artis:

> Lana Wachowski dan Lilly Wachowski bekerja dengan sejumlah artis seperti Laurence Fishburne, Keanu Reeves, Monica Bellucci, dan Lambert Wilson dalam beberapa proyek film.

Analisis ini memberikan gambaran tentang pola kolaborasi yang konsisten, proyek-proyek yang menonjol, dan keragaman dalam pilihan proyek di dunia perfilman Netflix. Analisis lebih lanjut dapat dilakukan untuk mendalami dampak dan keberhasilan proyek-proyek ini dari perspektif kritikus dan penonton.

##Buatkan peta negara yang nilainya berdasarkan bahasa asli film?
"""

import geopandas as gpd

# Memanggil data geometri dunia menggunakan pustaka geopandas
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Menggabungkan data geometri negara dengan data film berdasarkan kolom 'first_country'
merged_data = world.merge(data, left_on='name', right_on='first_country', how='left')

# Membuat peta interaktif menggunakan Plotly Express
fig = px.choropleth(merged_data, # Membuat peta berdasarkan data 'merged_data' yang sudah diproses sebelumnya
                    locations='iso_a3', # Menunjukkan kolom yang berisi kode iso_a3 untuk menentukan lokasi di peta
                    color='orig_lang', # Menetapkan kolom bahasa asli sebagai variabel warna pada peta
                    hover_name='first_country', # Menetapkan kolom yang akan ditampilkan saat mouse diarahkan ke suatu wilayah pada peta
                    title='Peta Bahasa Asli Film Berdasarkan Negara', # Menetapkan judul peta
                    color_discrete_sequence=px.colors.qualitative.Set1) # Menggunakan urutan warna diskrit dari palet warna qualitative 'Set1' untuk menunjukkan variasi bahasa

# Menampilkan peta
fig.show()

"""##Wawasan dari Peta Negara Berdasarkan Bahasa Asli Film
Wawasan dari peta tersebut dapat diambil dengan melihat distribusi bahasa dan negara di mana film-film tersebut tersedia:

* Bahasa dan Negara yang Paling Banyak Muncul:

> Bahasa Inggris memiliki prevalensi yang sangat tinggi, terutama di Amerika Serikat (704 film) dan Inggris (98 film).
Bahasa Prancis muncul di Prancis dan Inggris.
Bahasa Spanyol muncul di Argentina dan Meksiko.

* Distribusi Negara:

> Sebagian besar film dalam bahasa Inggris tersedia di Amerika Serikat, diikuti oleh Inggris, Kanada, dan beberapa negara lainnya.
Bahasa Prancis dan Spanyol lebih fokus pada negara asalnya (Prancis dan Argentina/Meksiko).

* Bahasa-Bahasa yang Banyak Digunakan Secara Global:

> Bahasa Inggris memiliki kehadiran global, muncul di banyak negara di seluruh dunia.
Bahasa Spanyol muncul di Argentina dan Meksiko, menunjukkan pengaruh yang signifikan di Amerika Latin.

* Varietas Bahasa di Negara Tertentu:

> Bahasa Inggris hadir di berbagai negara, termasuk Amerika Serikat, Inggris, Swiss, Serbia, Republik Ceko, Italia, Bulgaria, Finlandia, Rusia, Hungaria, dan Rumania.
Bahasa Spanyol muncul dalam varietas Spanyol dan di Argentina/Meksiko.

* Bahasa Minoritas:

> Beberapa bahasa seperti Hindi, Indonesia, Italia, Thailand, dan Malay muncul dalam jumlah yang lebih kecil tetapi menunjukkan keberagaman.

* Kehadiran Tunggal:

> Beberapa negara seperti Belgia, Belanda, Polandia, Denmark, Norwegia, Malaysia, Korea Selatan, dan India hanya memiliki satu film dalam dataset, menunjukkan Kehadiran Tunggal.

Wawasan ini memberikan gambaran tentang distribusi bahasa dan negara pada dataset film, serta mengidentifikasi dominasi bahasa tertentu di beberapa negara.
"""